
import type { LucideIcon } from 'lucide-react'; // Assuming Lucide is still desired for icons in React components

// --- Core Heuristics & Cognitive Skills Types ---
/**
 * Represents a Higher Cognition skill.
 */
export interface HCData {
  id: string; // e.g. "critique"
  tag: string; // e.g., #critique
  name: string; // e.g. "Critical Thinking"
  icon: LucideIcon | string; // LucideIcon component or emoji string
  description: string; // Concise description
  longDescription: string; // Detailed explanation
  keySkills: string[]; // List of key skills involved
  examples: string[]; // Practical examples of the skill
  shortTip: string; // A quick, actionable tip
}

/**
 * Represents an option for an HC Drill Question.
 */
export interface HCDrillOption {
  id: string; // e.g., 'a', 'b', 'c'
  text: string;
}

/**
 * Represents a Multiple Choice Question for HC Drills.
 */
export interface HCDrillQuestion {
  id: string; // Unique drill ID, e.g., "critique_1"
  hcId: string; // ID of the HC this drill belongs to, references HCData.id
  name: string; // Name of the drill/question
  questionText: string;
  options: HCDrillOption[];
  correctAnswerId: string; // ID of the correct HCDrillOption
  explanationOnCorrect: string;
  explanationOnIncorrect: string;
  rewardWXP: number; // WXP points awarded for completion
}

// --- Situational Judgement Test (SJT) Types ---
/**
 * Represents an option within an SJT scenario.
 */
export interface SJTScenarioOption {
  text: string;
  /** Name of the bias this option might indicate (e.g., "Confirmation Bias") or null. */
  cognitiveBiasTargeted: string | null;
  /** Score indicating how much choosing this option suggests the targeted bias (e.g., 0, 1, 2). 0 or undefined if not applicable. */
  cognitiveBiasTargetedScore?: number;
  /** Whether choosing this option represents better thinking in the context of the scenario. */
  isBetterThinking: boolean;
}

/**
 * Represents a Situational Judgement Test scenario.
 */
export interface SJTScenario {
  id: string; // e.g., "sjt_confirmation_bias"
  scenarioText: string;
  options: SJTScenarioOption[];
  /** General explanation for the scenario's targeted biases. */
  biasExplanation: string;
  /** Array of interest IDs this scenario might be relevant to. */
  relatedInterests: string[]; // e.g., ["tech", "science"]
}

// --- User Onboarding Data ---
/**
 * Data collected during user onboarding.
 */
export interface UserOnboardingData {
  userId: string;
  sjtAnswersById: { [scenarioId: string]: string }; // scenarioId -> selectedOptionId (option index as string)
  hcProficiency: { [hcId: string]: number }; // hcId -> 0-5 rating
  primaryGoal: string; // User's primary goal
  userInterests: string[]; // Array of interest IDs
}

// --- User Profile & Cognitive Profile Types ---
/**
 * Represents the user's cognitive profile.
 */
export interface CognitiveProfileV1 {
  version: 1;
  userId: string;
  username?: string; // Optional username
  primaryGoal: string;
  interests: string[]; // Array of interest IDs
  /** Map of bias names to their calculated scores (e.g., { "Confirmation Bias": 3 }). */
  potentialBiases: { [biasName: string]: number };
  /** Map of HC IDs to user's self-rated proficiency (0-5). */
  hcProficiency: { [hcId: string]: number };
  onboardingCompletedTimestamp: number;
}

// --- Gamification & Quest Types ---
/**
 * Represents a step in a quest.
 */
export interface QuestStep {
  description: string;
  completed: boolean;
  target?: string; // e.g., specific drill ID or HC ID
  targetValue?: number; // e.g., complete 3 drills of type X
}

/**
 * Represents a user quest.
 */
export interface Quest {
  id: string;
  title: string;
  description: string;
  icon: string; // Emoji or icon name
  steps: QuestStep[];
  rewardWXP: number;
  tags: string[]; // e.g., ["beginner", "critique"]
  isMandatory?: boolean; // If this quest is assigned by default
}

/**
 * Represents the user's gamification data.
 */
export interface GamificationData {
  wxp: number;
  level: number;
}

/**
 * Represents an entry in the completed challenge log.
 */
export interface CompletedChallengeLogEntry {
  timestamp: number;
  challengeText: string;
  hcRelated: string | null; // HC ID or "General"
  wxpEarned: number;
}

// --- Insight Types ---
/**
 * Represents an insight generated by the LLM.
 * Corresponds to the XML-like structure from the Cloudflare worker.
 */
export interface LLMInsight {
  pattern_type: string; // e.g., 'Confirmation Bias', 'Anchoring', or 'none'
  hc_related: string | null; // HC ID (e.g., 'bias-detection') or null
  explanation: string;
  micro_challenge_prompt: string;
  highlight_suggestion_css_selector?: string | null; // CSS selector for host page highlighting
  original_text_segment?: string; // The text that was analyzed
}

/**
 * Represents a predefined offline insight.
 */
export interface OfflineInsight {
  id: string;
  // text: string; // Original field, now covered by explanation for consistency
  // type: 'tip' | 'motivation' | 'question' | 'fact'; // Original field, now inferred or part of title
  hcId: string | null; // Optional: link to a relevant HC
  // Fields to match LLMInsight for easier use in InsightCard
  pattern_type: string; // Often 'general_tip' or 'reflection_prompt'
  explanation: string; // Typically the original 'text' field
  micro_challenge_prompt: string; // A generic prompt or derived from 'text' if it's a question
}

/**
 * General Insight type used in UI components like InsightCard.
 * This can be derived from LLMInsight or OfflineInsight.
 */
export interface UiInsight extends Partial<LLMInsight>, Partial<OfflineInsight> {
  id: string; // Can be generated or use original ID
  title: string; // e.g., "Potential Bias: Confirmation Bias" or "Quick Tip"
  sourceType: 'llm' | 'offline';
  // Ensure all common fields are present or optional
  hc_related: string | null;
  explanation: string;
  micro_challenge_prompt: string;
  timestamp?: number;
}


// --- Local Storage (MindframeStore) Types ---
/**
 * Represents the state of the Mindframe application stored locally.
 */
export interface MindframeStoreState {
  version: number;
  userId: string | null; // Unique user identifier
  userProfile: CognitiveProfileV1 | null;
  onboardingProgress: {
    currentStep: number;
    totalSteps: number;
    // any partial data collected during onboarding could be stored here
  } | null;
  settings: {
    analysisEnabled: boolean;
    showInsightCard: boolean;
    theme: 'light' | 'dark' | 'system';
  };
  cognitiveProfileHistory: CognitiveProfileV1[]; // Log of profile changes over time
  gamificationData: GamificationData;
  activeQuestIds: string[]; // IDs of quests currently active for the user
  completedQuestIds: string[]; // IDs of quests the user has completed
  completedDrillIds: string[]; // IDs of HCDrillQuestion the user has completed
  /** Log of recently completed micro-challenges from insights. */
  completedChallengeLog: CompletedChallengeLogEntry[];
  /** Cache for LLM analysis results. Key is a hash of text + user context. */
  llmAnalysisCache: {
    [key: string]: {
      insight: LLMInsight;
      timestamp: number;
    };
  };
  lastSyncTimestamp: number | null; // For potential future cloud sync
}
